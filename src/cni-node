#!/bin/sh

set -e

USAGE=$(cat <<EOF
Usage: cni-node <Command> [Options]

Commands
    install    install according to the options
    uninstall  uninstall according to the options

    list       list available CNI plugins
    version    show version

Options
    --plugins=<Plugins>      Comma separated CNI plugins
    --configs=<Configs>      CNI configuration templates
    --manifests=<Manifests>  Kubernetes manifest templates
    --wait                   Wait for SIGTERM or SIGINT after install/uninstall
EOF
)

function main {
    case "$1" in
        install|uninstall)
            local ACTION="$1"
            local WAIT=false
            shift

            for ARG in "$@"; do
                case "${ARG}" in
                    --plugins=*) local PLUGINS="${ARG#*=}"; shift ;;
                    --configs=*) local CONFIGS="${ARG#*=}"; shift ;;
                    --manifests=*) local MANIFESTS="${ARG#*=}"; shift ;;
                    --wait) WAIT=true; shift ;;
                    *=*) >&2 echo "Unknown argument: ${ARG%=*}"; exit 2 ;;
                    *) >&2 echo "Unknown argument: ${ARG}"; exit 2 ;;
                esac
            done

            [ -n "${PLUGINS}" ] && items "${ACTION}" plugins "${PLUGINS}"
            [ -n "${CONFIGS}" ] && items "${ACTION}" configs "${CONFIGS}"
            [ -n "${MANIFESTS}" ] && items "${ACTION}" manifests "${MANIFESTS}"

            echo "Complete."
            "${WAIT}" && wait
        ;;
        list) ls -1 /opt/cni/bin ;;
        version) cat /version ;;
        *) usage ;;
    esac
}

function items {
    local ACTION="$1"
    local TYPE="$2"
    local ITEMS="${3//,/ }"
    local ITEM

    for ITEM in ${ITEMS}; do
        "${TYPE}"_item_"${ACTION}" "${ITEM}"
    done
    [ -n "${ITEMS}" ] && echo "Done."
}

function plugins_item_install {
    plugin_install "$@"
}
function plugins_item_uninstall {
    plugin_uninstall "$@"
}
function configs_item_install {
    local FILENAME="$1"
    config_install "${FILENAME}" "$(cat "/etc/cni/net.d/${FILENAME}")"
}
function configs_item_uninstall {
    local FILENAME="$1"
    config_uninstall "${FILENAME}"
}
function manifests_item_install {
    local NAME="$1"
    manifest_install "${NAME}" "$(cat "/etc/kubernetes/manifests/${NAME}")"
}
function manifests_item_uninstall {
    local NAME="$1"
    manifest_uninstall "${NAME}" "$(cat "/etc/kubernetes/manifests/${NAME}")"
}

function plugin_install {
    local PLUGIN="$1"
    echo "Installing CNI plugin ${PLUGIN}..."
    install "/opt/cni/bin/${PLUGIN}" "/host/opt/cni/bin/${PLUGIN}"
}
function plugin_uninstall {
    local PLUGIN="$1"
    echo "Uninstalling CNI plugin ${PLUGIN}..."
    rm -f "/host/opt/cni/bin/${PLUGIN}"
}

function config_install {
    local NAME="$1"
    local CONTENT="$2"

    echo "Installing CNI configuration from ${NAME}..."

    local DEST_PATH="/host/etc/cni/net.d/${NAME}"
    local SED_ARGS; SED_ARGS="$(sed_args "${CONTENT}")"

    if [ -n "${SED_ARGS}" ]; then
        echo "${CONTENT}" | sed ${SED_ARGS} | tee "${DEST_PATH}" > /dev/null
    else
        echo "${CONTENT}" | tee "${DEST_PATH}" > /dev/null
    fi

    echo "### ${NAME} ###"
    echo "${CONTENT}"
    echo "###"
}
function config_uninstall {
    local FILENAME="$1"
    echo "Uninstalling CNI configuration ${FILENAME}..."
    rm -f "/host/etc/cni/net.d/${FILENAME}"
}

function manifest_install {
    local NAME="$1"
    local CONTENT="$2"

    echo "Applying Kubernetes object..."
    echo "### ${NAME} ###"
    echo "${CONTENT}" | envsubst
    echo "###"

    echo "${CONTENT}" | envsubst | kubectl apply --filename -
}
function manifest_uninstall {
    local NAME="$1"
    local CONTENT="$2"

    echo "Deleting Kubernetes object..."
    echo "### ${NAME} ###"
    echo "${CONTENT}" | envsubst
    echo "###"

    echo "${CONTENT}" | envsubst | kubectl delete --filename -
}

function sed_args {
    local CONTENT="$1"
    local POINTER
    local POINTERS

    POINTERS="$(echo "CONTENT" | sed -n "s/.*__\\(.*\\)__.*/\\1/p")"
    for POINTER in ${POINTERS}; do
        printf %b " -e /__${POINTER}__/r/host/${POINTER}" \
                  " -e /__${POINTER}__/d"
    done
}

function kubectl {
    local SERVICE_ACCOUNT="/var/run/secrets/kubernetes.io/serviceaccount"
    local CACERT="${SERVICE_ACCOUNT}/ca.crt"
    local TOKEN; TOKEN="$(cat "${SERVICE_ACCOUNT}/token")"

    /bin/kubectl --token "${TOKEN}" --certificate-authority "${CACERT}" "$@"
}

function wait {
    echo "Paused (waiting for SIGTERM or SIGINT to stop)..."
    trap stop SIGTERM SIGINT
    while :; do
        sleep 1
    done
}
function stop {
    echo "Stopped."
    exit 0
}

function usage {
    >&2 echo "${USAGE}"
    exit 2
}

main "$@"
