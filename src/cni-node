#!/bin/sh

set -e

USAGE=$(cat <<EOF
Usage: cni-node <Command> [Options]

Commands
    install    install according to the options
    uninstall  uninstall according to the options

    list       list available CNI plugins
    version    show version

Options
    --plugins=<Plugins>      Comma separated CNI plugins
    --configs=<Configs>      CNI configuration templates
    --manifests=<Manifests>  Kubernetes manifest templates
    --pause                  Pause for SIGTERM or SIGINT after install/uninstall
EOF
)

function main {
    case "$1" in
        install|uninstall)
            local ACTION="$1"
            local PAUSE=false

            shift
            for ARG in "$@"; do
                case "${ARG}" in
                    --plugins=*) local PLUGINS="${ARG#*=}" ;;
                    --configs=*) local CONFIGS="${ARG#*=}" ;;
                    --manifests=*) local MANIFESTS="${ARG#*=}" ;;
                    --pause) PAUSE=true ;;
                    *) unknown_option "${ARG}" ;;
                esac
            done

            do_action "${ACTION}" plugins "${PLUGINS}"
            do_action "${ACTION}" configs "${CONFIGS}"
            do_action "${ACTION}" manifests "${MANIFESTS}"

            if ${PAUSE}; then pause; fi
        ;;
        list) ls -1 /opt/cni/bin ;;
        version) cat /cni-node-version ;;
        *) usage ;;
    esac
}

function do_action {
    local ACTION="$1"
    local TYPE="${2%?}"
    local ITEMS="${3//,/ }"
    local ITEM

    for ITEM in ${ITEMS}; do
        "${TYPE}"_"${ACTION}" "${ITEM}"
    done
    if [ -n "${ITEMS}" ]; then
        echo "Done."
    fi
}

function plugin_install {
    local PLUGIN="$1"
    echo "Installing CNI plugin ${PLUGIN}..."
    mkdir -p "/host/opt/cni/bin"
    install "/opt/cni/bin/${PLUGIN}" "/host/opt/cni/bin/${PLUGIN}"
}
function plugin_uninstall {
    local PLUGIN="$1"
    echo "Uninstalling CNI plugin ${PLUGIN}..."
    rm -f "/host/opt/cni/bin/${PLUGIN}"
}

function config_install {
    local FILENAME="$1"
    local CONTENT; CONTENT="$(cat "/etc/cni/net.d/${FILENAME}")"
    local SED_ARGS; SED_ARGS="$(sed_args "${CONTENT}")"

    if [ -n "${SED_ARGS}" ]; then
        CONTENT="$(echo "${CONTENT}" | sed ${SED_ARGS})"
    fi

    echo "Installing CNI configuration from ${FILENAME}..."
    echo "### ${FILENAME} ###"
    echo "${CONTENT}"
    echo "###"

    mkdir -p "/host/etc/cni/net.d"
    echo "${CONTENT}" | tee "/host/etc/cni/net.d/${FILENAME}" > /dev/null
}
function config_uninstall {
    local FILENAME="$1"
    echo "Uninstalling CNI configuration ${FILENAME}..."
    rm -f "/host/etc/cni/net.d/${FILENAME}"
}

function manifest_install {
    local FILENAME="$1"
    local CONTENT; CONTENT="$(cat "/etc/kubernetes/manifests/${FILENAME}")"

    echo "Applying Kubernetes object..."
    echo "### ${FILENAME} ###"
    echo "${CONTENT}" | envsubst
    echo "###"

    echo "${CONTENT}" | envsubst | kubectl apply --filename -
}
function manifest_uninstall {
    local FILENAME="$1"
    local CONTENT; CONTENT="$(cat "/etc/kubernetes/manifests/${FILENAME}")"

    echo "Deleting Kubernetes object..."
    echo "### ${FILENAME} ###"
    echo "${CONTENT}" | envsubst
    echo "###"

    echo "${CONTENT}" | envsubst | kubectl delete --filename -
}

function sed_args {
    local CONTENT="$1"
    local POINTER
    local POINTERS

    POINTERS="$(echo "${CONTENT}" | sed -n "s/.*__\\(.*\\)__.*/\\1/p")"
    for POINTER in ${POINTERS}; do
        printf %b " -e /__${POINTER}__/r/host/etc/cni/net.d/${POINTER}" \
                  " -e /__${POINTER}__/d"
    done
}

function kubectl {
    local SERVICE_ACCOUNT="/var/run/secrets/kubernetes.io/serviceaccount"
    local CACERT="${SERVICE_ACCOUNT}/ca.crt"
    local TOKEN; TOKEN="$(cat "${SERVICE_ACCOUNT}/token")"

    /bin/kubectl --certificate-authority "${CACERT}" --token "${TOKEN}" "$@"
}

function pause {
    echo "Paused (waiting for SIGTERM or SIGINT to stop)..."
    trap stop SIGTERM SIGINT
    while :; do
        sleep 1
    done
}
function stop {
    echo "Stopped."
    exit 0
}

function usage {
    >&2 echo "${USAGE}"
    exit 2
}
function unknown_option {
    local OPTION="$1"
    >&2 echo "Unknown option: ${OPTION%%=*}"
    exit 2
}

main "$@"
