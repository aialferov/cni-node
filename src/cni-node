#!/bin/sh

set -e

USAGE=$(cat <<EOF
Usage: cni-node <Command> [Options]

Commands
    install    install according to the options
    uninstall  uninstall according to the options

    list       list available CNI plugins
    version    show version

Options
    --plugins=<Plugins>      Comma separated CNI plugins
    --configs=<Configs>      CNI configuration templates
    --manifests=<Manifests>  Kubernetes manifest templates
    --wait                   Wait for SIGTERM or SIGINT after install/uninstall
EOF
)

function main {
    case "$1" in
        install|uninstall)
            local ACTION="$1"
            local WAIT=false
            shift

            for ARG in "$@"; do
                case "${ARG}" in
                    --plugins=*) local PLUGINS="${ARG#*=}"; shift ;;
                    --configs=*) local CONFIGS="${ARG#*=}"; shift ;;
                    --manifests=*) local MANIFESTS="${ARG#*=}"; shift ;;
                    --wait) WAIT=true; shift ;;
                    *=*) >&2 echo "Unknown argument: ${ARG%=*}"; exit 2 ;;
                    *) >&2 echo "Unknown argument: ${ARG}"; exit 2 ;;
                esac
            done

            [ -n "${PLUGINS}" ] && "${ACTION}_plugins" "${PLUGINS}"
            [ -n "${CONFIGS}" ] && "${ACTION}_configs" "${CONFIGS}"
            [ -n "${MANIFESTS}" ] && "${ACTION}_manifests" "${MANIFESTS}"

            echo "Complete."
            "${WAIT}" && wait
        ;;
        list) ls -1 /opt/cni/bin ;;
        version) cat /version ;;
        *) usage ;;
    esac
}

function install_plugins {
    local PLUGINS="${1//,/ }"
    local PLUGIN

    for PLUGIN in ${PLUGINS}; do
        echo "Installing CNI plugin ${PLUGIN}..."
        install "/opt/cni/bin/${PLUGIN}" "/host/opt/cni/bin/${PLUGIN}"
    done
    [ -n "${PLUGINS}" ] && echo "Done."
}
function install_configs {
    local CONFIGS="${1//,/ }"
    local CONFIG

    for CONFIG in ${CONFIGS}; do
        echo "Installing CNI configuration file ${CONFIG}..."

        local CONFIG_PATH="/etc/cni/net.d/${CONFIG}"
        local CONFIG_DEST="/host/etc/cni/net.d/${CONFIG}"
        local SED_ARGS; SED_ARGS="$(sed_args "${CONFIG_PATH}")"

        if [ -n "${SED_ARGS}" ]; then
            sed ${SED_ARGS} "${CONFIG_PATH}" | tee "${CONFIG_DEST}" > /dev/null
        else
            cp "${CONFIG_PATH}" "${CONFIG_DEST}"
        fi

        echo "### ${CONFIG} ###"
        cat "${CONFIG_DEST}"
        echo "###"
    done
    [ -n "${CONFIGS}" ] && echo "Done."
}
function install_manifests {
    local MANIFESTS="${1//,/ }"
    local MANIFEST

    for MANIFEST in ${MANIFESTS}; do
        echo "Creating Kubernetes object from ${MANIFEST}..."
        local MANIFEST_PATH="/etc/kubernetes/manifests/${MANIFEST}"

        envsubst < "${MANIFEST_PATH}" | kubectl apply --filename -

        echo "### ${MANIFEST} ###"
        envsubst < "${MANIFEST_PATH}"
        echo "###"
    done
    [ -n "${MANIFESTS}" ] && echo "Done."
}

function uninstall_plugins {
    local PLUGINS=$*

    for PLUGIN in ${PLUGINS}; do
        echo "Uninstalling CNI plugin ${PLUGIN}..."
        rm -f "/host/opt/cni/bin/${PLUGIN}"
    done
    [ -n "${PLUGINS}" ] && echo "Done."
}
function uninstall_configs {
    local CONFIGS=$*

    for CONFIG in ${CONFIGS}; do
        echo "Uninstalling CNI configuration ${CONFIG}..."
        rm -f "/host/etc/cni/net.d/${CONFIG}"
    done
    [ -n "${CONFIGS}" ] && echo "Done."
}
function uninstall_manifests {
    local MANIFESTS=$*

    for MANIFEST in ${MANIFESTS}; do
        echo "Deleting Kubernetes object from ${MANIFEST}..."
        MANIFEST="/etc/kubernetes/manifests/${MANIFEST}"

        envsubst < "${MANIFEST}" | kubectl delete --filename -
    done
    [ -n "${MANIFESTS}" ] && echo "Done."
}

function kubectl {
    local SERVICE_ACCOUNT="/var/run/secrets/kubernetes.io/serviceaccount"
    local CACERT="${SERVICE_ACCOUNT}/ca.crt"
    local TOKEN; TOKEN="$(cat "${SERVICE_ACCOUNT}/token")"

    /bin/kubectl --token "${TOKEN}" --certificate-authority "${CACERT}" "$@"
}

function sed_args {
    local TEMPLATE="$1"

    for POINTER in $(template_pointers "${TEMPLATE}"); do
        printf %b " -e /__${POINTER}__/r/host/etc/cni/net.d/${POINTER}" \
                  " -e /__${POINTER}__/d"
    done
}

function template_pointers {
    local TEMPLATE="$1"
    sed -n "s/.*__\\(.*\\)__.*/\\1/p" "${TEMPLATE}"
}

function wait {
    echo "Paused (waiting for SIGTERM or SIGINT to stop)..."
    trap stop SIGTERM SIGINT
    while :; do
        sleep 1
    done
}
function stop {
    echo "Stopped."
    exit 0
}

function usage {
    >&2 echo "${USAGE}"
    exit 2
}

main "$@"
